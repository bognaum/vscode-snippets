{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	// console...
	"console.log": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cl",
		"body": ["console.log(\"${2:OK}\");"],
		"description": "console.log"
	},
	"console.log to variable": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cv",
		"body": ["console.log(`${3:${2:v}} >>`, ${2:});"],
		"description": "console.log to variable"
	},
	"console.trace": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cvt",
		"body": ["console.trace(`${3:${2:v}} >>`, ${2:});"],
		"description": "console.trace"
	},
	"console.assert": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Ca",
		"body": ["console.assert(${1:!(${2:true})}, `${1:!(${2:})} ${3:}`);"],
		"description": "console.assert"
	},
	"console.count": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cc",
		"body": ["console.count(\"${1:}\");"],
		"description": "console.count"
	},
	"console.dir": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cd",
		"body": ["console.log(`${1:} >>`);console.dir(${1:}${3:});"],
		"description": "console.dir"
	},
	"console.error": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Ce",
		"body": ["console.error(`(!)-USER'S `, `${2:OK}`);"],
		"description": "console.error"
	},
	"console.groupCollapsed": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cgc",
		"body": ["console.groupCollapsed(\"${2:OK}\");"],
		"description": "console.groupCollapsed"
	},
	"console.group": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cg",
		"body": ["console.group(\"${2:OK}\");"],
		"description": "console.groupEnd"
	},
	"console.groupEnd": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cge",
		"body": ["console.groupEnd();"],
		"description": "console.group"
	},
	"console.time": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cti",
		"body": ["console.time(\"${1:}\");"],
		"description": "console.time"
	},
	"console.timeEnd": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cte",
		"body": ["console.timeEnd(\"${1:}\");"],
		"description": "console.timeEnd"
	},
	"console.warn": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Cw",
		"body": ["console.warn(\"(!)-USER'S\", \"${2:OK}\");"],
		"description": "console.warn"
	},



	// DOM
	"document.createElement": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "CE",
		"body": ["document.createElement(\"${1:div}\");"],
		"description": "document.createElement"
	},
	"document.createTextNode": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "CTN",
		"body": ["document.createTextNode(\"${1:Text}\");"],
		"description": "document.createTextNode"
	},
	"document.querySelector(\".\")": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "DQS",
		"body": ["${1:document}.querySelector(\".$2\")"],
		"description": "document.querySelector"
	},
	"document.querySelectorAll(\".\")": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "DQSA",
		"body": ["${1:document}.querySelectorAll(\".$2\")"],
		"description": "document.querySelectorAll"
	},
	"querySelector(\".\")": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "QS",
		"body": ["querySelector(\".$2\")"],
		"description": "querySelector(\".\")"
	},
	"querySelectorAll(\".\")": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "QSA",
		"body": ["querySelectorAll(\".$2\")"],
		"description": "querySelectorAll(\".\")"
	},
	"capture last created element": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "CaptureElem",
		"body": ["document.all[document.all.length - ${1:1}]"],
		"description": "capture last created element"
	},
	"el.getBoundingClientRect()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "BCR",
		"body": ["${1:el}.getBoundingClientRect()"],
		"description": "el.getBoundingClientRect()"
	},
	
	
	
	// Functions
	"function () {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "f",
		"body": [
			"${2|function,!function,async function,function *,async function *|} $3($4)$5 {$0}"
		],
		"description": "function () {}"
	},
	"() => {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "f=",
		"body": ["($1) => {$0}"],
		"description": "function..."
	},
	
	"!function () {}()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "!f",
		"body": [
			"!${2:async }function $3($4) {$0}($0)"
		],
		"description": "!function () {}()"
	},
	"0||function () {}()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "0||f",
		"body": [
			"0||${2:async }function $3($4) {$0}($0)"
		],
		"description": "0||function () {}()"
	},


	// for
	"for (const i in ob) {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "for}",
		"body": [
			"for (const ${1:i} in ${2:ob}) {$0}"
		],
		"description": "for (const i in ob) {}"
	},
	"for (const v of ob) {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "for]",
		"body": [
			"for (const ${1:v} of ${2:arr}) {$0}"
		],
		"description": "for (const i of ob) {}"
	},
	"for (const [k, v] of ob.entries()) {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "for],",
		"body": [
			"for (const [${1:k}, ${2:v}]of ${3:arr}.entries()) {$0}"
		],
		"description": "for (const [k, v] of ob.entries()) {}"
	},


	// Export ESM
	"export default ...": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ex",
		"body": ["export ${1:default} "]
	},
	"import ... from ...": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "im",
		"body": ["import $1 from '$2';"]
	},
	"await import(...)": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "im()",
		"body": ["await import('$1');"]
	},
	"import(...).then(...)": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "im().",
		"body": ["import('$1').then(($2) => {$0});"]
	},
	
	
	// ...
	"\"use strict\";": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "US",
		"body": ["\"use strict\";"],
		"description": "\"use strict\";"
	},
	"'use strict';": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "US",
		"body": ["'use strict';"],
		"description": "'use strict';"
	},
	
	"switch ...": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "switch",
		"body": [
			"switch ($1) {",
			"\tcase $2: $3;",
			"\tdefault: $4;",
			"}",
		],
		"description": "switch ..."
	},
	"debugger": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "deb",
		"body": ["debugger;"],
		"description": "debugger"
	},
	"setInterval(...)": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "Si",
		"body": ["setInterval(() => {$2}, ${1:1000 * 60});"],
		"description": "setInterval(...)"
	},

	// if else
	"if () {} else {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "if",
		"body": ["if ($1) {$0} else {}"],
		"description": "if () {} else {}"
	},
	"else {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "else",
		"body": ["else {$0}"],
		"description": "else {}"
	},
	"else if () {}": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "elif",
		"body": ["else if ($1) {$0}"],
		"description": "else if () {}"
	},
}